rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function getUserData() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }
    
    function hasRole(role) {
      return getUserData().role == role;
    }
    
    function isAdmin() {
      return hasRole('admin');
    }
    
    function isManager() {
      return hasRole('manager');
    }
    
    function isAdminOrManager() {
      return isAdmin() || isManager();
    }
    
    function isUserActive() {
      return getUserData().status == 'active';
    }
    
    // Users collection rules
    match /users/{userId} {
      // Allow read access to authenticated users for their own document
      // Allow read access to admins and managers for all user documents
      allow read: if isAuthenticated() && isUserActive() && 
                     (isOwner(userId) || isAdminOrManager());
      
      // Only admins can create new users
      allow create: if isAuthenticated() && isAdmin() && isUserActive();
      
      // Only admins can update user documents
      // Users can update their own lastActive timestamp
      allow update: if isAuthenticated() && isUserActive() &&
                       (isAdmin() || 
                        (isOwner(userId) && 
                         request.data.diff(resource.data).affectedKeys().hasOnly(['lastActive'])));
      
      // Only admins can delete user documents
      allow delete: if isAuthenticated() && isAdmin() && isUserActive();
    }
    
    // Products collection rules
    match /products/{productId} {
      // All authenticated active users can read products
      allow read: if isAuthenticated() && isUserActive();
      
      // Only admins and managers can create products
      allow create: if isAuthenticated() && isAdminOrManager() && isUserActive();
      
      // Only admins and managers can update products
      allow update: if isAuthenticated() && isAdminOrManager() && isUserActive();
      
      // Only admins can delete products
      allow delete: if isAuthenticated() && isAdmin() && isUserActive();
    }
    
    // Transactions collection rules
    match /transactions/{transactionId} {
      // All authenticated active users can read transactions
      // Cashiers can only read their own transactions
      allow read: if isAuthenticated() && isUserActive() &&
                     (isAdminOrManager() || 
                      (hasRole('cashier') && resource.data.cashierId == request.auth.uid));
      
      // All authenticated active users can create transactions
      allow create: if isAuthenticated() && isUserActive() &&
                       request.data.cashierId == request.auth.uid;
      
      // Only admins and managers can update transactions
      allow update: if isAuthenticated() && isAdminOrManager() && isUserActive();
      
      // Only admins can delete transactions
      allow delete: if isAuthenticated() && isAdmin() && isUserActive();
    }
    
    // Analytics collection rules (if you decide to store computed analytics)
    match /analytics/{analyticsId} {
      // Only authenticated active users can read analytics
      allow read: if isAuthenticated() && isUserActive();
      
      // Only system/functions can write analytics
      allow write: if false;
    }
    
    // Deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}